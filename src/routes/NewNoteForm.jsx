import { useMemo, useRef, useState } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import PublicToggle from "./PublicToggle";
import CategoryInput from "./CategoryInput";
import RichEditor from "./RichEditor.jsx";
import LanguageMenu from "./LanguageMenu.jsx";
import { api } from "../lib/api";
import { useToast } from "../notifications/ToastProvider";
import { useSpeech } from "../hooks/useSpeech.js";

const plain = (html) =>
    typeof html === "string"
        ? html.replace(/<[^>]*>/g, "").replace(/&nbsp;/g, " ").trim()
        : "";

const noteSchema = Yup.object({
    title: Yup.string()
        .transform((v) => (typeof v === "string" ? v.trim() : v))
        .min(1, "Title can't be empty")
        .max(50, "Keep the title under 50 characters")
        .required("Title is required"),
    body: Yup.string()
        .test("not-empty", "Body is required", (v) => plain(v).length > 0)
        .test("max-plain", "Body is too long", (v) => plain(v).length <= 10000),
    public: Yup.boolean(),
    categories: Yup.array()
        .of(
            Yup.string()
                .transform((v) => (typeof v === "string" ? v.trim() : v))
                .min(2, "Category name too short")
                .max(30, "Category name too long")
        )
        .max(10, "Too many categories"),
});

function NewNoteForm({ onCreated }) {
    const { push: pushToast } = useToast() || { push: () => { } };
    const { supported, listening, start, stop, lang, setLang } = useSpeech();
    const [aiBusy, setAiBusy] = useState(false);
    const anchorRef = useRef(null);
    const [langOpen, setLangOpen] = useState(false);
    const [lastLang, setLastLang] = useState(navigator.language || "en-US");

    const initialValues = useMemo(
        () => ({
            title: "",
            body: "",
            public: true,
            categories: [],
        }),
        []
    );


    async function handleAIGenerate(setFieldValue, values) {
        setAiBusy(true);
        try {
            const promptHints = [values.title, ...(values.categories || [])]
                .filter(Boolean)
                .join(", ");

            const fakeTitle = values.title || "Untitled Inkline Note";
            const fakeBody = `<p><strong>${fakeTitle}</strong></p>
                <p>This note was generated by a placeholder AI function based on: <em>${promptHints || "no hints"}</em>.</p>
                <ul>
                <li>Point one with some detail.</li>
                <li>Point two elaborating the idea.</li>
                <li>A closing thought encouraging further writing.</li>
                </ul>`;
            const fakeCats =
                values.categories?.length ? values.categories : ["ideas", "draft"];

            setFieldValue("title", fakeTitle);
            setFieldValue("body", fakeBody);
            setFieldValue("categories", fakeCats);
            pushToast("AI draft generated (placeholder)", { variant: "success" });
        } catch {
            pushToast("AI generation failed", { variant: "error" });
        } finally {
            setAiBusy(false);
        }
    }

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h1 className="text-2xl font-semibold mb-4">New Note</h1>

            <Formik
                initialValues={initialValues}
                validationSchema={noteSchema}
                validateOnBlur
                validateOnChange
                onSubmit={async (values, helpers) => {
                    helpers.setStatus(null);
                    try {
                        await api.createNote({
                            title: values.title,
                            body: values.body,
                            public: values.public,
                            categories: values.categories,
                        });
                        pushToast("Note created", { variant: "success" });
                        onCreated?.();
                        helpers.resetForm();
                    } catch (e) {
                        const details =
                            e?.details?.errors || e?.details?.error || e?.message;

                        if (
                            details &&
                            typeof details === "object" &&
                            !Array.isArray(details)
                        ) {
                            const mapped = {};
                            for (const [k, v] of Object.entries(details)) {
                                mapped[k] = Array.isArray(v) ? v.join(", ") : String(v);
                            }
                            helpers.setErrors(mapped);
                            pushToast("Fix the highlighted fields", { variant: "error" });
                        } else {
                            const msg = Array.isArray(details)
                                ? details.join(", ")
                                : String(details || "Create failed");
                            helpers.setStatus(msg);
                            pushToast(msg, { variant: "error" });
                        }
                    } finally {
                        helpers.setSubmitting(false);
                    }
                }}
            >
                {({
                    values,
                    setFieldValue,
                    setFieldTouched,
                    isSubmitting,
                    status,
                }) => (
                    <Form className="space-y-5">
                        <div>
                            <label className="label" htmlFor="title">
                                Title
                            </label>
                            <Field id="title" name="title" className="input w-full" />
                            <ErrorMessage
                                name="title"
                                component="div"
                                className="text-red-500 text-sm mt-1"
                            />
                        </div>

                        <div>
                            <label className="label">Body</label>
                            <RichEditor
                                value={values.body}
                                onChange={(html) => setFieldValue("body", html)}
                                onBlur={() => setFieldTouched("body", true, true)}
                            />
                            <ErrorMessage
                                name="body"
                                component="div"
                                className="text-red-500 text-sm mt-1"
                            />
                        </div>

                        <div className="flex items-center justify-between">
                            <span className="label">Public</span>
                            <PublicToggle
                                checked={values.public}
                                onChange={(v) => setFieldValue("public", v)}
                            />
                        </div>

                        <div>
                            <label className="label">Categories</label>
                            <CategoryInput
                                value={values.categories}
                                onChange={(arr) => setFieldValue("categories", arr)}
                            />
                            <p className="text-xs text-mute mt-1">
                                Type to add new categories; they’ll be created if needed.
                            </p>
                            <ErrorMessage
                                name="categories"
                                component="div"
                                className="text-red-500 text-sm mt-1"
                            />
                        </div>

                        <div className="flex flex-wrap items-center gap-2">
                            <button
                                type="button"
                                className="btn btn-ghost"
                                onClick={() => handleAIGenerate(setFieldValue, values)}
                                disabled={aiBusy || isSubmitting}
                            >
                                {aiBusy ? "Generating…" : "Generate with AI"}
                            </button>

                            <div className="relative inline-flex items-stretch" ref={anchorRef}>
                                <button
                                    type="button"
                                    className="btn btn-ghost rounded-r-none"
                                    onClick={() => {
                                        if (listening) {
                                            stop();
                                        } else {
                                            start(
                                                (text) => {
                                                    const merged = `${values.body || ""}<p>${text}</p>`;
                                                    setFieldValue("body", merged);
                                                    pushToast("Transcript added", { variant: "success" });
                                                },
                                                lastLang
                                            );
                                        }
                                    }}
                                    title="Start/Stop transcription"
                                >
                                    {listening ? "Stop" : "Transcribe"}
                                </button>

                                <button
                                    type="button"
                                    className="btn btn-ghost rounded-l-none border-l border-black/10 dark:border-white/10"
                                    onClick={() => setLangOpen((v) => !v)}
                                    title="Language"
                                >
                                    {lastLang}
                                    <span className="ml-1">▾</span>
                                </button>

                                <div className="absolute left-0 top-full">
                                    <LanguageMenu
                                        open={langOpen}
                                        onClose={() => setLangOpen(false)}
                                        onPick={(code) => {
                                            setLastLang(code);
                                            if (!listening) {
                                                start(
                                                    (text) => {
                                                        const merged = `${values.body || ""}<p>${text}</p>`;
                                                        setFieldValue("body", merged);
                                                        pushToast("Transcript added", { variant: "success" });
                                                    },
                                                    code
                                                );
                                            }
                                        }}
                                    />
                                </div>
                            </div>

                            {!supported && (
                                <span className="text-xs text-mute">
                                    Voice input works best in Chrome.
                                </span>
                            )}
                        </div>

                        {status && (
                            <div className="text-red-500 text-sm">{String(status)}</div>
                        )}

                        <div className="pt-2 flex justify-end gap-2">
                            <button
                                type="reset"
                                className="btn btn-ghost"
                                disabled={isSubmitting}
                            >
                                Reset
                            </button>
                            <button
                                type="submit"
                                className="btn btn-primary"
                                disabled={isSubmitting}
                            >
                                {isSubmitting ? "Creating…" : "Create Note"}
                            </button>
                        </div>
                    </Form>
                )}
            </Formik>
        </div>
    );
}

export default NewNoteForm;
